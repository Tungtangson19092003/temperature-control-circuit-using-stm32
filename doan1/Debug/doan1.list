
doan1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000010bc  08000130  08000130  00001130  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000008  080011ec  080011ec  000021ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080011f4  080011f4  00003028  2**0
                  CONTENTS
  4 .ARM          00000000  080011f4  080011f4  00003028  2**0
                  CONTENTS
  5 .preinit_array 00000000  080011f4  080011f4  00003028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080011f4  080011f4  000021f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080011f8  080011f8  000021f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000028  20000000  080011fc  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000044  20000028  08001224  00003028  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000006c  08001224  0000306c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00003028  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000723  00000000  00000000  00003051  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000001ea  00000000  00000000  00003774  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000000c0  00000000  00000000  00003960  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000008b  00000000  00000000  00003a20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00001b4b  00000000  00000000  00003aab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000a3a  00000000  00000000  000055f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00007934  00000000  00000000  00006030  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0000d964  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000048c  00000000  00000000  0000d9a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000003c  00000000  00000000  0000de34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	@ (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	@ (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	@ (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000028 	.word	0x20000028
 800014c:	00000000 	.word	0x00000000
 8000150:	080011d4 	.word	0x080011d4

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	@ (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	@ (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	@ (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	2000002c 	.word	0x2000002c
 800016c:	080011d4 	.word	0x080011d4

08000170 <__aeabi_drsub>:
 8000170:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000174:	e002      	b.n	800017c <__adddf3>
 8000176:	bf00      	nop

08000178 <__aeabi_dsub>:
 8000178:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800017c <__adddf3>:
 800017c:	b530      	push	{r4, r5, lr}
 800017e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000182:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000186:	ea94 0f05 	teq	r4, r5
 800018a:	bf08      	it	eq
 800018c:	ea90 0f02 	teqeq	r0, r2
 8000190:	bf1f      	itttt	ne
 8000192:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000196:	ea55 0c02 	orrsne.w	ip, r5, r2
 800019a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800019e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001a2:	f000 80e2 	beq.w	800036a <__adddf3+0x1ee>
 80001a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001ae:	bfb8      	it	lt
 80001b0:	426d      	neglt	r5, r5
 80001b2:	dd0c      	ble.n	80001ce <__adddf3+0x52>
 80001b4:	442c      	add	r4, r5
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	ea82 0000 	eor.w	r0, r2, r0
 80001c2:	ea83 0101 	eor.w	r1, r3, r1
 80001c6:	ea80 0202 	eor.w	r2, r0, r2
 80001ca:	ea81 0303 	eor.w	r3, r1, r3
 80001ce:	2d36      	cmp	r5, #54	@ 0x36
 80001d0:	bf88      	it	hi
 80001d2:	bd30      	pophi	{r4, r5, pc}
 80001d4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001dc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001e4:	d002      	beq.n	80001ec <__adddf3+0x70>
 80001e6:	4240      	negs	r0, r0
 80001e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001ec:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001f8:	d002      	beq.n	8000200 <__adddf3+0x84>
 80001fa:	4252      	negs	r2, r2
 80001fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000200:	ea94 0f05 	teq	r4, r5
 8000204:	f000 80a7 	beq.w	8000356 <__adddf3+0x1da>
 8000208:	f1a4 0401 	sub.w	r4, r4, #1
 800020c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000210:	db0d      	blt.n	800022e <__adddf3+0xb2>
 8000212:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000216:	fa22 f205 	lsr.w	r2, r2, r5
 800021a:	1880      	adds	r0, r0, r2
 800021c:	f141 0100 	adc.w	r1, r1, #0
 8000220:	fa03 f20e 	lsl.w	r2, r3, lr
 8000224:	1880      	adds	r0, r0, r2
 8000226:	fa43 f305 	asr.w	r3, r3, r5
 800022a:	4159      	adcs	r1, r3
 800022c:	e00e      	b.n	800024c <__adddf3+0xd0>
 800022e:	f1a5 0520 	sub.w	r5, r5, #32
 8000232:	f10e 0e20 	add.w	lr, lr, #32
 8000236:	2a01      	cmp	r2, #1
 8000238:	fa03 fc0e 	lsl.w	ip, r3, lr
 800023c:	bf28      	it	cs
 800023e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000242:	fa43 f305 	asr.w	r3, r3, r5
 8000246:	18c0      	adds	r0, r0, r3
 8000248:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800024c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000250:	d507      	bpl.n	8000262 <__adddf3+0xe6>
 8000252:	f04f 0e00 	mov.w	lr, #0
 8000256:	f1dc 0c00 	rsbs	ip, ip, #0
 800025a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800025e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000262:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000266:	d31b      	bcc.n	80002a0 <__adddf3+0x124>
 8000268:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800026c:	d30c      	bcc.n	8000288 <__adddf3+0x10c>
 800026e:	0849      	lsrs	r1, r1, #1
 8000270:	ea5f 0030 	movs.w	r0, r0, rrx
 8000274:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000278:	f104 0401 	add.w	r4, r4, #1
 800027c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000280:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000284:	f080 809a 	bcs.w	80003bc <__adddf3+0x240>
 8000288:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800028c:	bf08      	it	eq
 800028e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000292:	f150 0000 	adcs.w	r0, r0, #0
 8000296:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029a:	ea41 0105 	orr.w	r1, r1, r5
 800029e:	bd30      	pop	{r4, r5, pc}
 80002a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002a4:	4140      	adcs	r0, r0
 80002a6:	eb41 0101 	adc.w	r1, r1, r1
 80002aa:	3c01      	subs	r4, #1
 80002ac:	bf28      	it	cs
 80002ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002b2:	d2e9      	bcs.n	8000288 <__adddf3+0x10c>
 80002b4:	f091 0f00 	teq	r1, #0
 80002b8:	bf04      	itt	eq
 80002ba:	4601      	moveq	r1, r0
 80002bc:	2000      	moveq	r0, #0
 80002be:	fab1 f381 	clz	r3, r1
 80002c2:	bf08      	it	eq
 80002c4:	3320      	addeq	r3, #32
 80002c6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ca:	f1b3 0220 	subs.w	r2, r3, #32
 80002ce:	da0c      	bge.n	80002ea <__adddf3+0x16e>
 80002d0:	320c      	adds	r2, #12
 80002d2:	dd08      	ble.n	80002e6 <__adddf3+0x16a>
 80002d4:	f102 0c14 	add.w	ip, r2, #20
 80002d8:	f1c2 020c 	rsb	r2, r2, #12
 80002dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002e0:	fa21 f102 	lsr.w	r1, r1, r2
 80002e4:	e00c      	b.n	8000300 <__adddf3+0x184>
 80002e6:	f102 0214 	add.w	r2, r2, #20
 80002ea:	bfd8      	it	le
 80002ec:	f1c2 0c20 	rsble	ip, r2, #32
 80002f0:	fa01 f102 	lsl.w	r1, r1, r2
 80002f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002f8:	bfdc      	itt	le
 80002fa:	ea41 010c 	orrle.w	r1, r1, ip
 80002fe:	4090      	lslle	r0, r2
 8000300:	1ae4      	subs	r4, r4, r3
 8000302:	bfa2      	ittt	ge
 8000304:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000308:	4329      	orrge	r1, r5
 800030a:	bd30      	popge	{r4, r5, pc}
 800030c:	ea6f 0404 	mvn.w	r4, r4
 8000310:	3c1f      	subs	r4, #31
 8000312:	da1c      	bge.n	800034e <__adddf3+0x1d2>
 8000314:	340c      	adds	r4, #12
 8000316:	dc0e      	bgt.n	8000336 <__adddf3+0x1ba>
 8000318:	f104 0414 	add.w	r4, r4, #20
 800031c:	f1c4 0220 	rsb	r2, r4, #32
 8000320:	fa20 f004 	lsr.w	r0, r0, r4
 8000324:	fa01 f302 	lsl.w	r3, r1, r2
 8000328:	ea40 0003 	orr.w	r0, r0, r3
 800032c:	fa21 f304 	lsr.w	r3, r1, r4
 8000330:	ea45 0103 	orr.w	r1, r5, r3
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f1c4 040c 	rsb	r4, r4, #12
 800033a:	f1c4 0220 	rsb	r2, r4, #32
 800033e:	fa20 f002 	lsr.w	r0, r0, r2
 8000342:	fa01 f304 	lsl.w	r3, r1, r4
 8000346:	ea40 0003 	orr.w	r0, r0, r3
 800034a:	4629      	mov	r1, r5
 800034c:	bd30      	pop	{r4, r5, pc}
 800034e:	fa21 f004 	lsr.w	r0, r1, r4
 8000352:	4629      	mov	r1, r5
 8000354:	bd30      	pop	{r4, r5, pc}
 8000356:	f094 0f00 	teq	r4, #0
 800035a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800035e:	bf06      	itte	eq
 8000360:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000364:	3401      	addeq	r4, #1
 8000366:	3d01      	subne	r5, #1
 8000368:	e74e      	b.n	8000208 <__adddf3+0x8c>
 800036a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800036e:	bf18      	it	ne
 8000370:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000374:	d029      	beq.n	80003ca <__adddf3+0x24e>
 8000376:	ea94 0f05 	teq	r4, r5
 800037a:	bf08      	it	eq
 800037c:	ea90 0f02 	teqeq	r0, r2
 8000380:	d005      	beq.n	800038e <__adddf3+0x212>
 8000382:	ea54 0c00 	orrs.w	ip, r4, r0
 8000386:	bf04      	itt	eq
 8000388:	4619      	moveq	r1, r3
 800038a:	4610      	moveq	r0, r2
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	ea91 0f03 	teq	r1, r3
 8000392:	bf1e      	ittt	ne
 8000394:	2100      	movne	r1, #0
 8000396:	2000      	movne	r0, #0
 8000398:	bd30      	popne	{r4, r5, pc}
 800039a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800039e:	d105      	bne.n	80003ac <__adddf3+0x230>
 80003a0:	0040      	lsls	r0, r0, #1
 80003a2:	4149      	adcs	r1, r1
 80003a4:	bf28      	it	cs
 80003a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80003aa:	bd30      	pop	{r4, r5, pc}
 80003ac:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003b0:	bf3c      	itt	cc
 80003b2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003b6:	bd30      	popcc	{r4, r5, pc}
 80003b8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003bc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003c0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003c4:	f04f 0000 	mov.w	r0, #0
 80003c8:	bd30      	pop	{r4, r5, pc}
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf1a      	itte	ne
 80003d0:	4619      	movne	r1, r3
 80003d2:	4610      	movne	r0, r2
 80003d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003d8:	bf1c      	itt	ne
 80003da:	460b      	movne	r3, r1
 80003dc:	4602      	movne	r2, r0
 80003de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003e2:	bf06      	itte	eq
 80003e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003e8:	ea91 0f03 	teqeq	r1, r3
 80003ec:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003f0:	bd30      	pop	{r4, r5, pc}
 80003f2:	bf00      	nop

080003f4 <__aeabi_ui2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000408:	f04f 0500 	mov.w	r5, #0
 800040c:	f04f 0100 	mov.w	r1, #0
 8000410:	e750      	b.n	80002b4 <__adddf3+0x138>
 8000412:	bf00      	nop

08000414 <__aeabi_i2d>:
 8000414:	f090 0f00 	teq	r0, #0
 8000418:	bf04      	itt	eq
 800041a:	2100      	moveq	r1, #0
 800041c:	4770      	bxeq	lr
 800041e:	b530      	push	{r4, r5, lr}
 8000420:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000424:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000428:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800042c:	bf48      	it	mi
 800042e:	4240      	negmi	r0, r0
 8000430:	f04f 0100 	mov.w	r1, #0
 8000434:	e73e      	b.n	80002b4 <__adddf3+0x138>
 8000436:	bf00      	nop

08000438 <__aeabi_f2d>:
 8000438:	0042      	lsls	r2, r0, #1
 800043a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800043e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000442:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000446:	bf1f      	itttt	ne
 8000448:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800044c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000450:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000454:	4770      	bxne	lr
 8000456:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800045a:	bf08      	it	eq
 800045c:	4770      	bxeq	lr
 800045e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000462:	bf04      	itt	eq
 8000464:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000468:	4770      	bxeq	lr
 800046a:	b530      	push	{r4, r5, lr}
 800046c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000470:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000474:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000478:	e71c      	b.n	80002b4 <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_ul2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f04f 0500 	mov.w	r5, #0
 800048a:	e00a      	b.n	80004a2 <__aeabi_l2d+0x16>

0800048c <__aeabi_l2d>:
 800048c:	ea50 0201 	orrs.w	r2, r0, r1
 8000490:	bf08      	it	eq
 8000492:	4770      	bxeq	lr
 8000494:	b530      	push	{r4, r5, lr}
 8000496:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800049a:	d502      	bpl.n	80004a2 <__aeabi_l2d+0x16>
 800049c:	4240      	negs	r0, r0
 800049e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004a6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004ae:	f43f aed8 	beq.w	8000262 <__adddf3+0xe6>
 80004b2:	f04f 0203 	mov.w	r2, #3
 80004b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ba:	bf18      	it	ne
 80004bc:	3203      	addne	r2, #3
 80004be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c2:	bf18      	it	ne
 80004c4:	3203      	addne	r2, #3
 80004c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80004d2:	fa20 f002 	lsr.w	r0, r0, r2
 80004d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004da:	ea40 000e 	orr.w	r0, r0, lr
 80004de:	fa21 f102 	lsr.w	r1, r1, r2
 80004e2:	4414      	add	r4, r2
 80004e4:	e6bd      	b.n	8000262 <__adddf3+0xe6>
 80004e6:	bf00      	nop

080004e8 <__aeabi_dmul>:
 80004e8:	b570      	push	{r4, r5, r6, lr}
 80004ea:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004ee:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004f6:	bf1d      	ittte	ne
 80004f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004fc:	ea94 0f0c 	teqne	r4, ip
 8000500:	ea95 0f0c 	teqne	r5, ip
 8000504:	f000 f8de 	bleq	80006c4 <__aeabi_dmul+0x1dc>
 8000508:	442c      	add	r4, r5
 800050a:	ea81 0603 	eor.w	r6, r1, r3
 800050e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000512:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000516:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800051a:	bf18      	it	ne
 800051c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000520:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000524:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000528:	d038      	beq.n	800059c <__aeabi_dmul+0xb4>
 800052a:	fba0 ce02 	umull	ip, lr, r0, r2
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000536:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800053a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800053e:	f04f 0600 	mov.w	r6, #0
 8000542:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000546:	f09c 0f00 	teq	ip, #0
 800054a:	bf18      	it	ne
 800054c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000550:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000554:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000558:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800055c:	d204      	bcs.n	8000568 <__aeabi_dmul+0x80>
 800055e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000562:	416d      	adcs	r5, r5
 8000564:	eb46 0606 	adc.w	r6, r6, r6
 8000568:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800056c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000570:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000574:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000578:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800057c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000580:	bf88      	it	hi
 8000582:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000586:	d81e      	bhi.n	80005c6 <__aeabi_dmul+0xde>
 8000588:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800058c:	bf08      	it	eq
 800058e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000592:	f150 0000 	adcs.w	r0, r0, #0
 8000596:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800059a:	bd70      	pop	{r4, r5, r6, pc}
 800059c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005a0:	ea46 0101 	orr.w	r1, r6, r1
 80005a4:	ea40 0002 	orr.w	r0, r0, r2
 80005a8:	ea81 0103 	eor.w	r1, r1, r3
 80005ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005b0:	bfc2      	ittt	gt
 80005b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005ba:	bd70      	popgt	{r4, r5, r6, pc}
 80005bc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005c0:	f04f 0e00 	mov.w	lr, #0
 80005c4:	3c01      	subs	r4, #1
 80005c6:	f300 80ab 	bgt.w	8000720 <__aeabi_dmul+0x238>
 80005ca:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005ce:	bfde      	ittt	le
 80005d0:	2000      	movle	r0, #0
 80005d2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005d6:	bd70      	pople	{r4, r5, r6, pc}
 80005d8:	f1c4 0400 	rsb	r4, r4, #0
 80005dc:	3c20      	subs	r4, #32
 80005de:	da35      	bge.n	800064c <__aeabi_dmul+0x164>
 80005e0:	340c      	adds	r4, #12
 80005e2:	dc1b      	bgt.n	800061c <__aeabi_dmul+0x134>
 80005e4:	f104 0414 	add.w	r4, r4, #20
 80005e8:	f1c4 0520 	rsb	r5, r4, #32
 80005ec:	fa00 f305 	lsl.w	r3, r0, r5
 80005f0:	fa20 f004 	lsr.w	r0, r0, r4
 80005f4:	fa01 f205 	lsl.w	r2, r1, r5
 80005f8:	ea40 0002 	orr.w	r0, r0, r2
 80005fc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000600:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000604:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000608:	fa21 f604 	lsr.w	r6, r1, r4
 800060c:	eb42 0106 	adc.w	r1, r2, r6
 8000610:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000614:	bf08      	it	eq
 8000616:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800061a:	bd70      	pop	{r4, r5, r6, pc}
 800061c:	f1c4 040c 	rsb	r4, r4, #12
 8000620:	f1c4 0520 	rsb	r5, r4, #32
 8000624:	fa00 f304 	lsl.w	r3, r0, r4
 8000628:	fa20 f005 	lsr.w	r0, r0, r5
 800062c:	fa01 f204 	lsl.w	r2, r1, r4
 8000630:	ea40 0002 	orr.w	r0, r0, r2
 8000634:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000638:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800063c:	f141 0100 	adc.w	r1, r1, #0
 8000640:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000644:	bf08      	it	eq
 8000646:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064a:	bd70      	pop	{r4, r5, r6, pc}
 800064c:	f1c4 0520 	rsb	r5, r4, #32
 8000650:	fa00 f205 	lsl.w	r2, r0, r5
 8000654:	ea4e 0e02 	orr.w	lr, lr, r2
 8000658:	fa20 f304 	lsr.w	r3, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea43 0302 	orr.w	r3, r3, r2
 8000664:	fa21 f004 	lsr.w	r0, r1, r4
 8000668:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800066c:	fa21 f204 	lsr.w	r2, r1, r4
 8000670:	ea20 0002 	bic.w	r0, r0, r2
 8000674:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f094 0f00 	teq	r4, #0
 8000688:	d10f      	bne.n	80006aa <__aeabi_dmul+0x1c2>
 800068a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800068e:	0040      	lsls	r0, r0, #1
 8000690:	eb41 0101 	adc.w	r1, r1, r1
 8000694:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000698:	bf08      	it	eq
 800069a:	3c01      	subeq	r4, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1a6>
 800069e:	ea41 0106 	orr.w	r1, r1, r6
 80006a2:	f095 0f00 	teq	r5, #0
 80006a6:	bf18      	it	ne
 80006a8:	4770      	bxne	lr
 80006aa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80006ae:	0052      	lsls	r2, r2, #1
 80006b0:	eb43 0303 	adc.w	r3, r3, r3
 80006b4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006b8:	bf08      	it	eq
 80006ba:	3d01      	subeq	r5, #1
 80006bc:	d0f7      	beq.n	80006ae <__aeabi_dmul+0x1c6>
 80006be:	ea43 0306 	orr.w	r3, r3, r6
 80006c2:	4770      	bx	lr
 80006c4:	ea94 0f0c 	teq	r4, ip
 80006c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006cc:	bf18      	it	ne
 80006ce:	ea95 0f0c 	teqne	r5, ip
 80006d2:	d00c      	beq.n	80006ee <__aeabi_dmul+0x206>
 80006d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d8:	bf18      	it	ne
 80006da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006de:	d1d1      	bne.n	8000684 <__aeabi_dmul+0x19c>
 80006e0:	ea81 0103 	eor.w	r1, r1, r3
 80006e4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e8:	f04f 0000 	mov.w	r0, #0
 80006ec:	bd70      	pop	{r4, r5, r6, pc}
 80006ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f2:	bf06      	itte	eq
 80006f4:	4610      	moveq	r0, r2
 80006f6:	4619      	moveq	r1, r3
 80006f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006fc:	d019      	beq.n	8000732 <__aeabi_dmul+0x24a>
 80006fe:	ea94 0f0c 	teq	r4, ip
 8000702:	d102      	bne.n	800070a <__aeabi_dmul+0x222>
 8000704:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000708:	d113      	bne.n	8000732 <__aeabi_dmul+0x24a>
 800070a:	ea95 0f0c 	teq	r5, ip
 800070e:	d105      	bne.n	800071c <__aeabi_dmul+0x234>
 8000710:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000714:	bf1c      	itt	ne
 8000716:	4610      	movne	r0, r2
 8000718:	4619      	movne	r1, r3
 800071a:	d10a      	bne.n	8000732 <__aeabi_dmul+0x24a>
 800071c:	ea81 0103 	eor.w	r1, r1, r3
 8000720:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000728:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800072c:	f04f 0000 	mov.w	r0, #0
 8000730:	bd70      	pop	{r4, r5, r6, pc}
 8000732:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000736:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800073a:	bd70      	pop	{r4, r5, r6, pc}

0800073c <__aeabi_ddiv>:
 800073c:	b570      	push	{r4, r5, r6, lr}
 800073e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000742:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000746:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800074a:	bf1d      	ittte	ne
 800074c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000750:	ea94 0f0c 	teqne	r4, ip
 8000754:	ea95 0f0c 	teqne	r5, ip
 8000758:	f000 f8a7 	bleq	80008aa <__aeabi_ddiv+0x16e>
 800075c:	eba4 0405 	sub.w	r4, r4, r5
 8000760:	ea81 0e03 	eor.w	lr, r1, r3
 8000764:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000768:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800076c:	f000 8088 	beq.w	8000880 <__aeabi_ddiv+0x144>
 8000770:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000774:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000778:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800077c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000780:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000784:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000788:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800078c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000790:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000794:	429d      	cmp	r5, r3
 8000796:	bf08      	it	eq
 8000798:	4296      	cmpeq	r6, r2
 800079a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800079e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007a2:	d202      	bcs.n	80007aa <__aeabi_ddiv+0x6e>
 80007a4:	085b      	lsrs	r3, r3, #1
 80007a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007aa:	1ab6      	subs	r6, r6, r2
 80007ac:	eb65 0503 	sbc.w	r5, r5, r3
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007ba:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007be:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007c6:	bf22      	ittt	cs
 80007c8:	1ab6      	subcs	r6, r6, r2
 80007ca:	4675      	movcs	r5, lr
 80007cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007d0:	085b      	lsrs	r3, r3, #1
 80007d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007de:	bf22      	ittt	cs
 80007e0:	1ab6      	subcs	r6, r6, r2
 80007e2:	4675      	movcs	r5, lr
 80007e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007e8:	085b      	lsrs	r3, r3, #1
 80007ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007f6:	bf22      	ittt	cs
 80007f8:	1ab6      	subcs	r6, r6, r2
 80007fa:	4675      	movcs	r5, lr
 80007fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000800:	085b      	lsrs	r3, r3, #1
 8000802:	ea4f 0232 	mov.w	r2, r2, rrx
 8000806:	ebb6 0e02 	subs.w	lr, r6, r2
 800080a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800080e:	bf22      	ittt	cs
 8000810:	1ab6      	subcs	r6, r6, r2
 8000812:	4675      	movcs	r5, lr
 8000814:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000818:	ea55 0e06 	orrs.w	lr, r5, r6
 800081c:	d018      	beq.n	8000850 <__aeabi_ddiv+0x114>
 800081e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000822:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000826:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800082a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800082e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000832:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000836:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800083a:	d1c0      	bne.n	80007be <__aeabi_ddiv+0x82>
 800083c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000840:	d10b      	bne.n	800085a <__aeabi_ddiv+0x11e>
 8000842:	ea41 0100 	orr.w	r1, r1, r0
 8000846:	f04f 0000 	mov.w	r0, #0
 800084a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800084e:	e7b6      	b.n	80007be <__aeabi_ddiv+0x82>
 8000850:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000854:	bf04      	itt	eq
 8000856:	4301      	orreq	r1, r0
 8000858:	2000      	moveq	r0, #0
 800085a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800085e:	bf88      	it	hi
 8000860:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000864:	f63f aeaf 	bhi.w	80005c6 <__aeabi_dmul+0xde>
 8000868:	ebb5 0c03 	subs.w	ip, r5, r3
 800086c:	bf04      	itt	eq
 800086e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000872:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000876:	f150 0000 	adcs.w	r0, r0, #0
 800087a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800087e:	bd70      	pop	{r4, r5, r6, pc}
 8000880:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000884:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000888:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800088c:	bfc2      	ittt	gt
 800088e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000892:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000896:	bd70      	popgt	{r4, r5, r6, pc}
 8000898:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800089c:	f04f 0e00 	mov.w	lr, #0
 80008a0:	3c01      	subs	r4, #1
 80008a2:	e690      	b.n	80005c6 <__aeabi_dmul+0xde>
 80008a4:	ea45 0e06 	orr.w	lr, r5, r6
 80008a8:	e68d      	b.n	80005c6 <__aeabi_dmul+0xde>
 80008aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008ae:	ea94 0f0c 	teq	r4, ip
 80008b2:	bf08      	it	eq
 80008b4:	ea95 0f0c 	teqeq	r5, ip
 80008b8:	f43f af3b 	beq.w	8000732 <__aeabi_dmul+0x24a>
 80008bc:	ea94 0f0c 	teq	r4, ip
 80008c0:	d10a      	bne.n	80008d8 <__aeabi_ddiv+0x19c>
 80008c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008c6:	f47f af34 	bne.w	8000732 <__aeabi_dmul+0x24a>
 80008ca:	ea95 0f0c 	teq	r5, ip
 80008ce:	f47f af25 	bne.w	800071c <__aeabi_dmul+0x234>
 80008d2:	4610      	mov	r0, r2
 80008d4:	4619      	mov	r1, r3
 80008d6:	e72c      	b.n	8000732 <__aeabi_dmul+0x24a>
 80008d8:	ea95 0f0c 	teq	r5, ip
 80008dc:	d106      	bne.n	80008ec <__aeabi_ddiv+0x1b0>
 80008de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e2:	f43f aefd 	beq.w	80006e0 <__aeabi_dmul+0x1f8>
 80008e6:	4610      	mov	r0, r2
 80008e8:	4619      	mov	r1, r3
 80008ea:	e722      	b.n	8000732 <__aeabi_dmul+0x24a>
 80008ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f0:	bf18      	it	ne
 80008f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008f6:	f47f aec5 	bne.w	8000684 <__aeabi_dmul+0x19c>
 80008fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008fe:	f47f af0d 	bne.w	800071c <__aeabi_dmul+0x234>
 8000902:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000906:	f47f aeeb 	bne.w	80006e0 <__aeabi_dmul+0x1f8>
 800090a:	e712      	b.n	8000732 <__aeabi_dmul+0x24a>

0800090c <__gedf2>:
 800090c:	f04f 3cff 	mov.w	ip, #4294967295
 8000910:	e006      	b.n	8000920 <__cmpdf2+0x4>
 8000912:	bf00      	nop

08000914 <__ledf2>:
 8000914:	f04f 0c01 	mov.w	ip, #1
 8000918:	e002      	b.n	8000920 <__cmpdf2+0x4>
 800091a:	bf00      	nop

0800091c <__cmpdf2>:
 800091c:	f04f 0c01 	mov.w	ip, #1
 8000920:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000924:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000928:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800092c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000930:	bf18      	it	ne
 8000932:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000936:	d01b      	beq.n	8000970 <__cmpdf2+0x54>
 8000938:	b001      	add	sp, #4
 800093a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800093e:	bf0c      	ite	eq
 8000940:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000944:	ea91 0f03 	teqne	r1, r3
 8000948:	bf02      	ittt	eq
 800094a:	ea90 0f02 	teqeq	r0, r2
 800094e:	2000      	moveq	r0, #0
 8000950:	4770      	bxeq	lr
 8000952:	f110 0f00 	cmn.w	r0, #0
 8000956:	ea91 0f03 	teq	r1, r3
 800095a:	bf58      	it	pl
 800095c:	4299      	cmppl	r1, r3
 800095e:	bf08      	it	eq
 8000960:	4290      	cmpeq	r0, r2
 8000962:	bf2c      	ite	cs
 8000964:	17d8      	asrcs	r0, r3, #31
 8000966:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800096a:	f040 0001 	orr.w	r0, r0, #1
 800096e:	4770      	bx	lr
 8000970:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d102      	bne.n	8000980 <__cmpdf2+0x64>
 800097a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800097e:	d107      	bne.n	8000990 <__cmpdf2+0x74>
 8000980:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000984:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000988:	d1d6      	bne.n	8000938 <__cmpdf2+0x1c>
 800098a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800098e:	d0d3      	beq.n	8000938 <__cmpdf2+0x1c>
 8000990:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000994:	4770      	bx	lr
 8000996:	bf00      	nop

08000998 <__aeabi_cdrcmple>:
 8000998:	4684      	mov	ip, r0
 800099a:	4610      	mov	r0, r2
 800099c:	4662      	mov	r2, ip
 800099e:	468c      	mov	ip, r1
 80009a0:	4619      	mov	r1, r3
 80009a2:	4663      	mov	r3, ip
 80009a4:	e000      	b.n	80009a8 <__aeabi_cdcmpeq>
 80009a6:	bf00      	nop

080009a8 <__aeabi_cdcmpeq>:
 80009a8:	b501      	push	{r0, lr}
 80009aa:	f7ff ffb7 	bl	800091c <__cmpdf2>
 80009ae:	2800      	cmp	r0, #0
 80009b0:	bf48      	it	mi
 80009b2:	f110 0f00 	cmnmi.w	r0, #0
 80009b6:	bd01      	pop	{r0, pc}

080009b8 <__aeabi_dcmpeq>:
 80009b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009bc:	f7ff fff4 	bl	80009a8 <__aeabi_cdcmpeq>
 80009c0:	bf0c      	ite	eq
 80009c2:	2001      	moveq	r0, #1
 80009c4:	2000      	movne	r0, #0
 80009c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ca:	bf00      	nop

080009cc <__aeabi_dcmplt>:
 80009cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d0:	f7ff ffea 	bl	80009a8 <__aeabi_cdcmpeq>
 80009d4:	bf34      	ite	cc
 80009d6:	2001      	movcc	r0, #1
 80009d8:	2000      	movcs	r0, #0
 80009da:	f85d fb08 	ldr.w	pc, [sp], #8
 80009de:	bf00      	nop

080009e0 <__aeabi_dcmple>:
 80009e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e4:	f7ff ffe0 	bl	80009a8 <__aeabi_cdcmpeq>
 80009e8:	bf94      	ite	ls
 80009ea:	2001      	movls	r0, #1
 80009ec:	2000      	movhi	r0, #0
 80009ee:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f2:	bf00      	nop

080009f4 <__aeabi_dcmpge>:
 80009f4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f8:	f7ff ffce 	bl	8000998 <__aeabi_cdrcmple>
 80009fc:	bf94      	ite	ls
 80009fe:	2001      	movls	r0, #1
 8000a00:	2000      	movhi	r0, #0
 8000a02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a06:	bf00      	nop

08000a08 <__aeabi_dcmpgt>:
 8000a08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a0c:	f7ff ffc4 	bl	8000998 <__aeabi_cdrcmple>
 8000a10:	bf34      	ite	cc
 8000a12:	2001      	movcc	r0, #1
 8000a14:	2000      	movcs	r0, #0
 8000a16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1a:	bf00      	nop

08000a1c <__aeabi_d2f>:
 8000a1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a20:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a24:	bf24      	itt	cs
 8000a26:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a2a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a2e:	d90d      	bls.n	8000a4c <__aeabi_d2f+0x30>
 8000a30:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a34:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a38:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a3c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a40:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a44:	bf08      	it	eq
 8000a46:	f020 0001 	biceq.w	r0, r0, #1
 8000a4a:	4770      	bx	lr
 8000a4c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a50:	d121      	bne.n	8000a96 <__aeabi_d2f+0x7a>
 8000a52:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000a56:	bfbc      	itt	lt
 8000a58:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000a5c:	4770      	bxlt	lr
 8000a5e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a62:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a66:	f1c2 0218 	rsb	r2, r2, #24
 8000a6a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a6e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a72:	fa20 f002 	lsr.w	r0, r0, r2
 8000a76:	bf18      	it	ne
 8000a78:	f040 0001 	orrne.w	r0, r0, #1
 8000a7c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a80:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a84:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a88:	ea40 000c 	orr.w	r0, r0, ip
 8000a8c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a90:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a94:	e7cc      	b.n	8000a30 <__aeabi_d2f+0x14>
 8000a96:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a9a:	d107      	bne.n	8000aac <__aeabi_d2f+0x90>
 8000a9c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000aa0:	bf1e      	ittt	ne
 8000aa2:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000aa6:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000aaa:	4770      	bxne	lr
 8000aac:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ab0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ab4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop

08000abc <delay>:
	uint32_t BDCR;
	uint32_t CSR;
}RCC_RedDef_t;
RCC_RedDef_t*pRCC=(RCC_RedDef_t*)0x40021000;

void delay(){
 8000abc:	b480      	push	{r7}
 8000abe:	b083      	sub	sp, #12
 8000ac0:	af00      	add	r7, sp, #0
	for(uint32_t i=0; i < 30000;i++);
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	607b      	str	r3, [r7, #4]
 8000ac6:	e002      	b.n	8000ace <delay+0x12>
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	3301      	adds	r3, #1
 8000acc:	607b      	str	r3, [r7, #4]
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	f247 522f 	movw	r2, #29999	@ 0x752f
 8000ad4:	4293      	cmp	r3, r2
 8000ad6:	d9f7      	bls.n	8000ac8 <delay+0xc>
}
 8000ad8:	bf00      	nop
 8000ada:	bf00      	nop
 8000adc:	370c      	adds	r7, #12
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bc80      	pop	{r7}
 8000ae2:	4770      	bx	lr

08000ae4 <RCC_GetPCKLValue>:

uint32_t RCC_GetPCKLValue(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	b085      	sub	sp, #20
 8000ae8:	af00      	add	r7, sp, #0
uint32_t pclk,sclk;
uint8_t clksrc,temp,ahbp,apb1p;
clksrc=((pRCC->CFGR>>2) & 0x3);
 8000aea:	4b21      	ldr	r3, [pc, #132]	@ (8000b70 <RCC_GetPCKLValue+0x8c>)
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	685b      	ldr	r3, [r3, #4]
 8000af0:	089b      	lsrs	r3, r3, #2
 8000af2:	b2db      	uxtb	r3, r3
 8000af4:	f003 0303 	and.w	r3, r3, #3
 8000af8:	727b      	strb	r3, [r7, #9]
if( clksrc==0)
 8000afa:	7a7b      	ldrb	r3, [r7, #9]
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d101      	bne.n	8000b04 <RCC_GetPCKLValue+0x20>
	sclk=8000000;//HSI
 8000b00:	4b1c      	ldr	r3, [pc, #112]	@ (8000b74 <RCC_GetPCKLValue+0x90>)
 8000b02:	60fb      	str	r3, [r7, #12]
temp=((pRCC->CFGR>>4) & 0xf);
 8000b04:	4b1a      	ldr	r3, [pc, #104]	@ (8000b70 <RCC_GetPCKLValue+0x8c>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	685b      	ldr	r3, [r3, #4]
 8000b0a:	091b      	lsrs	r3, r3, #4
 8000b0c:	b2db      	uxtb	r3, r3
 8000b0e:	f003 030f 	and.w	r3, r3, #15
 8000b12:	723b      	strb	r3, [r7, #8]
if(temp<8){
 8000b14:	7a3b      	ldrb	r3, [r7, #8]
 8000b16:	2b07      	cmp	r3, #7
 8000b18:	d802      	bhi.n	8000b20 <RCC_GetPCKLValue+0x3c>
	ahbp=1;
 8000b1a:	2301      	movs	r3, #1
 8000b1c:	72fb      	strb	r3, [r7, #11]
 8000b1e:	e005      	b.n	8000b2c <RCC_GetPCKLValue+0x48>
}
else{
	ahbp=AHB_Prescaler[temp-8];
 8000b20:	7a3b      	ldrb	r3, [r7, #8]
 8000b22:	3b08      	subs	r3, #8
 8000b24:	4a14      	ldr	r2, [pc, #80]	@ (8000b78 <RCC_GetPCKLValue+0x94>)
 8000b26:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000b2a:	72fb      	strb	r3, [r7, #11]
}
temp=((pRCC->CFGR>>8) & 0x7);
 8000b2c:	4b10      	ldr	r3, [pc, #64]	@ (8000b70 <RCC_GetPCKLValue+0x8c>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	685b      	ldr	r3, [r3, #4]
 8000b32:	0a1b      	lsrs	r3, r3, #8
 8000b34:	b2db      	uxtb	r3, r3
 8000b36:	f003 0307 	and.w	r3, r3, #7
 8000b3a:	723b      	strb	r3, [r7, #8]
if(temp<4){
 8000b3c:	7a3b      	ldrb	r3, [r7, #8]
 8000b3e:	2b03      	cmp	r3, #3
 8000b40:	d802      	bhi.n	8000b48 <RCC_GetPCKLValue+0x64>
	apb1p=1;
 8000b42:	2301      	movs	r3, #1
 8000b44:	72bb      	strb	r3, [r7, #10]
 8000b46:	e005      	b.n	8000b54 <RCC_GetPCKLValue+0x70>
}
else{
	apb1p=APB_Prescaler[temp-4];
 8000b48:	7a3b      	ldrb	r3, [r7, #8]
 8000b4a:	3b04      	subs	r3, #4
 8000b4c:	4a0b      	ldr	r2, [pc, #44]	@ (8000b7c <RCC_GetPCKLValue+0x98>)
 8000b4e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000b52:	72bb      	strb	r3, [r7, #10]
}
pclk=(sclk/ahbp)/apb1p;
 8000b54:	7afb      	ldrb	r3, [r7, #11]
 8000b56:	68fa      	ldr	r2, [r7, #12]
 8000b58:	fbb2 f2f3 	udiv	r2, r2, r3
 8000b5c:	7abb      	ldrb	r3, [r7, #10]
 8000b5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b62:	607b      	str	r3, [r7, #4]
return pclk;
 8000b64:	687b      	ldr	r3, [r7, #4]
}
 8000b66:	4618      	mov	r0, r3
 8000b68:	3714      	adds	r7, #20
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bc80      	pop	{r7}
 8000b6e:	4770      	bx	lr
 8000b70:	20000024 	.word	0x20000024
 8000b74:	007a1200 	.word	0x007a1200
 8000b78:	20000004 	.word	0x20000004
 8000b7c:	20000014 	.word	0x20000014

08000b80 <I2C_PeripheralControl>:

void I2C_PeripheralControl(I2C1_RedDef_t*pI2Cx,uint8_t enordi){
 8000b80:	b480      	push	{r7}
 8000b82:	b083      	sub	sp, #12
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
 8000b88:	460b      	mov	r3, r1
 8000b8a:	70fb      	strb	r3, [r7, #3]
	if(enordi==ENABLE){
 8000b8c:	78fb      	ldrb	r3, [r7, #3]
 8000b8e:	2b01      	cmp	r3, #1
 8000b90:	d106      	bne.n	8000ba0 <I2C_PeripheralControl+0x20>
	    pI2Cx->CR1|=(1<<0);
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	f043 0201 	orr.w	r2, r3, #1
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	601a      	str	r2, [r3, #0]
		}else{
	    pI2Cx->CR1&=~(1<<0);
		}
}
 8000b9e:	e005      	b.n	8000bac <I2C_PeripheralControl+0x2c>
	    pI2Cx->CR1&=~(1<<0);
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	f023 0201 	bic.w	r2, r3, #1
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	601a      	str	r2, [r3, #0]
}
 8000bac:	bf00      	nop
 8000bae:	370c      	adds	r7, #12
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bc80      	pop	{r7}
 8000bb4:	4770      	bx	lr

08000bb6 <I2C_ClearADDRFlag>:

void I2C_ClearADDRFlag(I2C1_RedDef_t*pI2Cx){
 8000bb6:	b480      	push	{r7}
 8000bb8:	b085      	sub	sp, #20
 8000bba:	af00      	add	r7, sp, #0
 8000bbc:	6078      	str	r0, [r7, #4]
	uint32_t read=pI2Cx->SR1;
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	695b      	ldr	r3, [r3, #20]
 8000bc2:	60fb      	str	r3, [r7, #12]
	read=pI2Cx->SR2;
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	699b      	ldr	r3, [r3, #24]
 8000bc8:	60fb      	str	r3, [r7, #12]
	(void)read;
}
 8000bca:	bf00      	nop
 8000bcc:	3714      	adds	r7, #20
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bc80      	pop	{r7}
 8000bd2:	4770      	bx	lr

08000bd4 <I2C_GetFlagStatus>:

uint8_t I2C_GetFlagStatus(I2C1_RedDef_t*pI2Cx,uint32_t Flagname){
 8000bd4:	b480      	push	{r7}
 8000bd6:	b083      	sub	sp, #12
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
 8000bdc:	6039      	str	r1, [r7, #0]
	if(pI2Cx->SR1 & Flagname){
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	695a      	ldr	r2, [r3, #20]
 8000be2:	683b      	ldr	r3, [r7, #0]
 8000be4:	4013      	ands	r3, r2
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d001      	beq.n	8000bee <I2C_GetFlagStatus+0x1a>
		return 1;
 8000bea:	2301      	movs	r3, #1
 8000bec:	e000      	b.n	8000bf0 <I2C_GetFlagStatus+0x1c>
	}else{
		return 0;
 8000bee:	2300      	movs	r3, #0
	}
}
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	370c      	adds	r7, #12
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bc80      	pop	{r7}
 8000bf8:	4770      	bx	lr

08000bfa <I2C_ExecuteAddressPhaseRead>:

void I2C_ExecuteAddressPhaseRead(I2C1_RedDef_t*pI2Cx,uint8_t SlaveAddr){
 8000bfa:	b480      	push	{r7}
 8000bfc:	b083      	sub	sp, #12
 8000bfe:	af00      	add	r7, sp, #0
 8000c00:	6078      	str	r0, [r7, #4]
 8000c02:	460b      	mov	r3, r1
 8000c04:	70fb      	strb	r3, [r7, #3]
	SlaveAddr=SlaveAddr << 1;
 8000c06:	78fb      	ldrb	r3, [r7, #3]
 8000c08:	005b      	lsls	r3, r3, #1
 8000c0a:	70fb      	strb	r3, [r7, #3]
	SlaveAddr|=1;//SlaveAddr is Slave address + R/nW=1
 8000c0c:	78fb      	ldrb	r3, [r7, #3]
 8000c0e:	f043 0301 	orr.w	r3, r3, #1
 8000c12:	70fb      	strb	r3, [r7, #3]
	pI2Cx->DR=SlaveAddr;
 8000c14:	78fa      	ldrb	r2, [r7, #3]
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	611a      	str	r2, [r3, #16]
}
 8000c1a:	bf00      	nop
 8000c1c:	370c      	adds	r7, #12
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bc80      	pop	{r7}
 8000c22:	4770      	bx	lr

08000c24 <I2C_ExecuteAddressPhaseWrite>:

void I2C_ExecuteAddressPhaseWrite(I2C1_RedDef_t*pI2Cx,uint8_t SlaveAddr){
 8000c24:	b480      	push	{r7}
 8000c26:	b083      	sub	sp, #12
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
 8000c2c:	460b      	mov	r3, r1
 8000c2e:	70fb      	strb	r3, [r7, #3]
	SlaveAddr=SlaveAddr << 1;
 8000c30:	78fb      	ldrb	r3, [r7, #3]
 8000c32:	005b      	lsls	r3, r3, #1
 8000c34:	70fb      	strb	r3, [r7, #3]
	SlaveAddr&=~1;//SlaveAddr is Slave address + R/nW=0
 8000c36:	78fb      	ldrb	r3, [r7, #3]
 8000c38:	f023 0301 	bic.w	r3, r3, #1
 8000c3c:	70fb      	strb	r3, [r7, #3]
	pI2Cx->DR=SlaveAddr;
 8000c3e:	78fa      	ldrb	r2, [r7, #3]
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	611a      	str	r2, [r3, #16]
}
 8000c44:	bf00      	nop
 8000c46:	370c      	adds	r7, #12
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bc80      	pop	{r7}
 8000c4c:	4770      	bx	lr

08000c4e <I2C_GenerateStartCondition>:

void I2C_GenerateStartCondition(I2C1_RedDef_t*pI2Cx){
 8000c4e:	b480      	push	{r7}
 8000c50:	b083      	sub	sp, #12
 8000c52:	af00      	add	r7, sp, #0
 8000c54:	6078      	str	r0, [r7, #4]
	pI2Cx->CR1|=(1<<8);
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	601a      	str	r2, [r3, #0]
}
 8000c62:	bf00      	nop
 8000c64:	370c      	adds	r7, #12
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bc80      	pop	{r7}
 8000c6a:	4770      	bx	lr

08000c6c <I2C_GenerateStoptCondition>:

void I2C_GenerateStoptCondition(I2C1_RedDef_t*pI2Cx){
 8000c6c:	b480      	push	{r7}
 8000c6e:	b083      	sub	sp, #12
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
	pI2Cx->CR1|=(1<<9);
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	601a      	str	r2, [r3, #0]
}
 8000c80:	bf00      	nop
 8000c82:	370c      	adds	r7, #12
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bc80      	pop	{r7}
 8000c88:	4770      	bx	lr

08000c8a <I2C_ManageAcking>:

void I2C_ManageAcking(I2C1_RedDef_t*pI2Cx,uint8_t enordi){
 8000c8a:	b480      	push	{r7}
 8000c8c:	b083      	sub	sp, #12
 8000c8e:	af00      	add	r7, sp, #0
 8000c90:	6078      	str	r0, [r7, #4]
 8000c92:	460b      	mov	r3, r1
 8000c94:	70fb      	strb	r3, [r7, #3]
	if(enordi==ENABLE){
 8000c96:	78fb      	ldrb	r3, [r7, #3]
 8000c98:	2b01      	cmp	r3, #1
 8000c9a:	d106      	bne.n	8000caa <I2C_ManageAcking+0x20>
		pI2Cx->CR1|=(1<<10);
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	601a      	str	r2, [r3, #0]
	}else{
		pI2Cx->CR1&=~(1<<10);
	}
}
 8000ca8:	e005      	b.n	8000cb6 <I2C_ManageAcking+0x2c>
		pI2Cx->CR1&=~(1<<10);
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	601a      	str	r2, [r3, #0]
}
 8000cb6:	bf00      	nop
 8000cb8:	370c      	adds	r7, #12
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bc80      	pop	{r7}
 8000cbe:	4770      	bx	lr

08000cc0 <Init>:

void Init(){
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b082      	sub	sp, #8
 8000cc4:	af00      	add	r7, sp, #0

       //enble clock for GPIOB
	   pRCC->APB2ENR|=(1<<3);
 8000cc6:	4b4a      	ldr	r3, [pc, #296]	@ (8000df0 <Init+0x130>)
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	699a      	ldr	r2, [r3, #24]
 8000ccc:	4b48      	ldr	r3, [pc, #288]	@ (8000df0 <Init+0x130>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	f042 0208 	orr.w	r2, r2, #8
 8000cd4:	619a      	str	r2, [r3, #24]

	   pGPIOB->CRH |=(3<<4);//pb9 output 50mhz
 8000cd6:	4b47      	ldr	r3, [pc, #284]	@ (8000df4 <Init+0x134>)
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	685a      	ldr	r2, [r3, #4]
 8000cdc:	4b45      	ldr	r3, [pc, #276]	@ (8000df4 <Init+0x134>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	f042 0230 	orr.w	r2, r2, #48	@ 0x30
 8000ce4:	605a      	str	r2, [r3, #4]
	   pGPIOB->CRH &=(~(3<<6));//pb9 output push-pull
 8000ce6:	4b43      	ldr	r3, [pc, #268]	@ (8000df4 <Init+0x134>)
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	685a      	ldr	r2, [r3, #4]
 8000cec:	4b41      	ldr	r3, [pc, #260]	@ (8000df4 <Init+0x134>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	f022 02c0 	bic.w	r2, r2, #192	@ 0xc0
 8000cf4:	605a      	str	r2, [r3, #4]

	   //enble clock for GPIOB
	   pRCC->APB1ENR|=(1<<21);
 8000cf6:	4b3e      	ldr	r3, [pc, #248]	@ (8000df0 <Init+0x130>)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	69da      	ldr	r2, [r3, #28]
 8000cfc:	4b3c      	ldr	r3, [pc, #240]	@ (8000df0 <Init+0x130>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	f442 1200 	orr.w	r2, r2, #2097152	@ 0x200000
 8000d04:	61da      	str	r2, [r3, #28]

	   pGPIOB->CRL &=~(3<<24);//clear
 8000d06:	4b3b      	ldr	r3, [pc, #236]	@ (8000df4 <Init+0x134>)
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	681a      	ldr	r2, [r3, #0]
 8000d0c:	4b39      	ldr	r3, [pc, #228]	@ (8000df4 <Init+0x134>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8000d14:	601a      	str	r2, [r3, #0]
	   pGPIOB->CRL |=(1<<24);//pb6 output 10mhz
 8000d16:	4b37      	ldr	r3, [pc, #220]	@ (8000df4 <Init+0x134>)
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	681a      	ldr	r2, [r3, #0]
 8000d1c:	4b35      	ldr	r3, [pc, #212]	@ (8000df4 <Init+0x134>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 8000d24:	601a      	str	r2, [r3, #0]
	   pGPIOB->CRL |=(3<<26);//pb6 output alt SCL
 8000d26:	4b33      	ldr	r3, [pc, #204]	@ (8000df4 <Init+0x134>)
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	681a      	ldr	r2, [r3, #0]
 8000d2c:	4b31      	ldr	r3, [pc, #196]	@ (8000df4 <Init+0x134>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	f042 6240 	orr.w	r2, r2, #201326592	@ 0xc000000
 8000d34:	601a      	str	r2, [r3, #0]

	   pGPIOB->CRL &=~(3<<28);//clear
 8000d36:	4b2f      	ldr	r3, [pc, #188]	@ (8000df4 <Init+0x134>)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	681a      	ldr	r2, [r3, #0]
 8000d3c:	4b2d      	ldr	r3, [pc, #180]	@ (8000df4 <Init+0x134>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8000d44:	601a      	str	r2, [r3, #0]
	   pGPIOB->CRL |=(1<<28);//pb7 output 10mhz
 8000d46:	4b2b      	ldr	r3, [pc, #172]	@ (8000df4 <Init+0x134>)
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	681a      	ldr	r2, [r3, #0]
 8000d4c:	4b29      	ldr	r3, [pc, #164]	@ (8000df4 <Init+0x134>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8000d54:	601a      	str	r2, [r3, #0]
	   pGPIOB->CRL |=(3<<30);//pb7 output alt SDA
 8000d56:	4b27      	ldr	r3, [pc, #156]	@ (8000df4 <Init+0x134>)
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	681a      	ldr	r2, [r3, #0]
 8000d5c:	4b25      	ldr	r3, [pc, #148]	@ (8000df4 <Init+0x134>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	f042 4240 	orr.w	r2, r2, #3221225472	@ 0xc0000000
 8000d64:	601a      	str	r2, [r3, #0]

	  I2C_ManageAcking(pI2C1,ENABLE);// ACK on
 8000d66:	4b24      	ldr	r3, [pc, #144]	@ (8000df8 <Init+0x138>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	2101      	movs	r1, #1
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	f7ff ff8c 	bl	8000c8a <I2C_ManageAcking>

	  pI2C1->CR2|=(RCC_GetPCKLValue()/1000000u);//config the FREQ of CR2
 8000d72:	f7ff feb7 	bl	8000ae4 <RCC_GetPCKLValue>
 8000d76:	4603      	mov	r3, r0
 8000d78:	4a20      	ldr	r2, [pc, #128]	@ (8000dfc <Init+0x13c>)
 8000d7a:	fba2 2303 	umull	r2, r3, r2, r3
 8000d7e:	0c99      	lsrs	r1, r3, #18
 8000d80:	4b1d      	ldr	r3, [pc, #116]	@ (8000df8 <Init+0x138>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	685a      	ldr	r2, [r3, #4]
 8000d86:	4b1c      	ldr	r3, [pc, #112]	@ (8000df8 <Init+0x138>)
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	430a      	orrs	r2, r1
 8000d8c:	605a      	str	r2, [r3, #4]

	  //calculate CCR for the standard mode
	  uint16_t ccr_value=0;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	80fb      	strh	r3, [r7, #6]
	  uint8_t tempreg1=0;
 8000d92:	2300      	movs	r3, #0
 8000d94:	717b      	strb	r3, [r7, #5]
	  ccr_value=RCC_GetPCKLValue()/(2*I2C_SCL_SPEED_SM);
 8000d96:	f7ff fea5 	bl	8000ae4 <RCC_GetPCKLValue>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	099b      	lsrs	r3, r3, #6
 8000d9e:	4a18      	ldr	r2, [pc, #96]	@ (8000e00 <Init+0x140>)
 8000da0:	fba2 2303 	umull	r2, r3, r2, r3
 8000da4:	099b      	lsrs	r3, r3, #6
 8000da6:	80fb      	strh	r3, [r7, #6]
	  tempreg1=(ccr_value &  0xfff);
 8000da8:	88fb      	ldrh	r3, [r7, #6]
 8000daa:	717b      	strb	r3, [r7, #5]
	  pI2C1->CCR|=tempreg1;
 8000dac:	4b12      	ldr	r3, [pc, #72]	@ (8000df8 <Init+0x138>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	69d9      	ldr	r1, [r3, #28]
 8000db2:	797a      	ldrb	r2, [r7, #5]
 8000db4:	4b10      	ldr	r3, [pc, #64]	@ (8000df8 <Init+0x138>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	430a      	orrs	r2, r1
 8000dba:	61da      	str	r2, [r3, #28]

	  // config TRISE
	  uint16_t tempreg2=0;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	807b      	strh	r3, [r7, #2]
	  tempreg2=(RCC_GetPCKLValue()/1000000u)+1;
 8000dc0:	f7ff fe90 	bl	8000ae4 <RCC_GetPCKLValue>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	4a0d      	ldr	r2, [pc, #52]	@ (8000dfc <Init+0x13c>)
 8000dc8:	fba2 2303 	umull	r2, r3, r2, r3
 8000dcc:	0c9b      	lsrs	r3, r3, #18
 8000dce:	b29b      	uxth	r3, r3
 8000dd0:	3301      	adds	r3, #1
 8000dd2:	807b      	strh	r3, [r7, #2]
	  pI2C1->TRISE|=(tempreg2 & 0x3f);
 8000dd4:	4b08      	ldr	r3, [pc, #32]	@ (8000df8 <Init+0x138>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	6a19      	ldr	r1, [r3, #32]
 8000dda:	887b      	ldrh	r3, [r7, #2]
 8000ddc:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8000de0:	4b05      	ldr	r3, [pc, #20]	@ (8000df8 <Init+0x138>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	430a      	orrs	r2, r1
 8000de6:	621a      	str	r2, [r3, #32]
}
 8000de8:	bf00      	nop
 8000dea:	3708      	adds	r7, #8
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}
 8000df0:	20000024 	.word	0x20000024
 8000df4:	2000001c 	.word	0x2000001c
 8000df8:	20000020 	.word	0x20000020
 8000dfc:	431bde83 	.word	0x431bde83
 8000e00:	053e2d63 	.word	0x053e2d63

08000e04 <GPIO_FanOn>:

void GPIO_FanOn(GPIO_RedDef_t*pGPIOx){
 8000e04:	b480      	push	{r7}
 8000e06:	b083      	sub	sp, #12
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
	pGPIOx->ODR|=(1<<9);
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	68db      	ldr	r3, [r3, #12]
 8000e10:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	60da      	str	r2, [r3, #12]
}
 8000e18:	bf00      	nop
 8000e1a:	370c      	adds	r7, #12
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bc80      	pop	{r7}
 8000e20:	4770      	bx	lr

08000e22 <GPIO_FanOff>:

void GPIO_FanOff(GPIO_RedDef_t*pGPIOx){
 8000e22:	b480      	push	{r7}
 8000e24:	b083      	sub	sp, #12
 8000e26:	af00      	add	r7, sp, #0
 8000e28:	6078      	str	r0, [r7, #4]
	pGPIOx->ODR&=(~(1<<9));
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	68db      	ldr	r3, [r3, #12]
 8000e2e:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	60da      	str	r2, [r3, #12]
}
 8000e36:	bf00      	nop
 8000e38:	370c      	adds	r7, #12
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bc80      	pop	{r7}
 8000e3e:	4770      	bx	lr

08000e40 <I2C_MasterSendData>:

void I2C_MasterSendData(I2C1_RedDef_t*pI2Cx,uint8_t *pTxBuffer,uint8_t len,uint8_t SlaveAddr){
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b084      	sub	sp, #16
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	60f8      	str	r0, [r7, #12]
 8000e48:	60b9      	str	r1, [r7, #8]
 8000e4a:	4611      	mov	r1, r2
 8000e4c:	461a      	mov	r2, r3
 8000e4e:	460b      	mov	r3, r1
 8000e50:	71fb      	strb	r3, [r7, #7]
 8000e52:	4613      	mov	r3, r2
 8000e54:	71bb      	strb	r3, [r7, #6]
	//1.generate the start condition
	I2C_GenerateStartCondition(pI2Cx);
 8000e56:	68f8      	ldr	r0, [r7, #12]
 8000e58:	f7ff fef9 	bl	8000c4e <I2C_GenerateStartCondition>
	//2.confirm the start condition was completed by SB flag
	while(!I2C_GetFlagStatus(pI2Cx,I2C_FLAG_SB ));
 8000e5c:	bf00      	nop
 8000e5e:	2101      	movs	r1, #1
 8000e60:	68f8      	ldr	r0, [r7, #12]
 8000e62:	f7ff feb7 	bl	8000bd4 <I2C_GetFlagStatus>
 8000e66:	4603      	mov	r3, r0
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d0f8      	beq.n	8000e5e <I2C_MasterSendData+0x1e>
	//3.send the address of slave + R/nW
	I2C_ExecuteAddressPhaseWrite(pI2Cx,SlaveAddr);
 8000e6c:	79bb      	ldrb	r3, [r7, #6]
 8000e6e:	4619      	mov	r1, r3
 8000e70:	68f8      	ldr	r0, [r7, #12]
 8000e72:	f7ff fed7 	bl	8000c24 <I2C_ExecuteAddressPhaseWrite>
	//4.confirm address phase was completed by ADDR flag
	while(!I2C_GetFlagStatus(pI2Cx,I2C_FLAG_ADDR ));
 8000e76:	bf00      	nop
 8000e78:	2102      	movs	r1, #2
 8000e7a:	68f8      	ldr	r0, [r7, #12]
 8000e7c:	f7ff feaa 	bl	8000bd4 <I2C_GetFlagStatus>
 8000e80:	4603      	mov	r3, r0
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d0f8      	beq.n	8000e78 <I2C_MasterSendData+0x38>
	//5.clear the ADDR fag
	I2C_ClearADDRFlag(pI2Cx);
 8000e86:	68f8      	ldr	r0, [r7, #12]
 8000e88:	f7ff fe95 	bl	8000bb6 <I2C_ClearADDRFlag>
	//6.send the data until len=0
	while(len>0){
 8000e8c:	e012      	b.n	8000eb4 <I2C_MasterSendData+0x74>
		// wait until TXE=1
		while(!I2C_GetFlagStatus(pI2Cx,I2C_FLAG_TXE ));
 8000e8e:	bf00      	nop
 8000e90:	2180      	movs	r1, #128	@ 0x80
 8000e92:	68f8      	ldr	r0, [r7, #12]
 8000e94:	f7ff fe9e 	bl	8000bd4 <I2C_GetFlagStatus>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d0f8      	beq.n	8000e90 <I2C_MasterSendData+0x50>
		//write data from data resgister to buffer
		pI2Cx->DR=*pTxBuffer;
 8000e9e:	68bb      	ldr	r3, [r7, #8]
 8000ea0:	781b      	ldrb	r3, [r3, #0]
 8000ea2:	461a      	mov	r2, r3
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	611a      	str	r2, [r3, #16]
		// increase the buffer's adddress
		pTxBuffer++;
 8000ea8:	68bb      	ldr	r3, [r7, #8]
 8000eaa:	3301      	adds	r3, #1
 8000eac:	60bb      	str	r3, [r7, #8]
		len--;
 8000eae:	79fb      	ldrb	r3, [r7, #7]
 8000eb0:	3b01      	subs	r3, #1
 8000eb2:	71fb      	strb	r3, [r7, #7]
	while(len>0){
 8000eb4:	79fb      	ldrb	r3, [r7, #7]
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d1e9      	bne.n	8000e8e <I2C_MasterSendData+0x4e>
	}
	//7.when len=0 , wait TXE=1 and BTF=1 before STOP
	while(!I2C_GetFlagStatus(pI2Cx,I2C_FLAG_TXE));
 8000eba:	bf00      	nop
 8000ebc:	2180      	movs	r1, #128	@ 0x80
 8000ebe:	68f8      	ldr	r0, [r7, #12]
 8000ec0:	f7ff fe88 	bl	8000bd4 <I2C_GetFlagStatus>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d0f8      	beq.n	8000ebc <I2C_MasterSendData+0x7c>
	while(!I2C_GetFlagStatus(pI2Cx,I2C_FLAG_BTF));
 8000eca:	bf00      	nop
 8000ecc:	2104      	movs	r1, #4
 8000ece:	68f8      	ldr	r0, [r7, #12]
 8000ed0:	f7ff fe80 	bl	8000bd4 <I2C_GetFlagStatus>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d0f8      	beq.n	8000ecc <I2C_MasterSendData+0x8c>
	//8.generate the stop condition
	I2C_GenerateStoptCondition(pI2Cx);
 8000eda:	68f8      	ldr	r0, [r7, #12]
 8000edc:	f7ff fec6 	bl	8000c6c <I2C_GenerateStoptCondition>
}
 8000ee0:	bf00      	nop
 8000ee2:	3710      	adds	r7, #16
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}

08000ee8 <I2C_MasterReceiveData>:

void I2C_MasterReceiveData(I2C1_RedDef_t*pI2Cx,uint8_t *pRxBuffer,uint8_t len,uint8_t SlaveAddr,uint8_t *count){
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b086      	sub	sp, #24
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	60f8      	str	r0, [r7, #12]
 8000ef0:	60b9      	str	r1, [r7, #8]
 8000ef2:	4611      	mov	r1, r2
 8000ef4:	461a      	mov	r2, r3
 8000ef6:	460b      	mov	r3, r1
 8000ef8:	71fb      	strb	r3, [r7, #7]
 8000efa:	4613      	mov	r3, r2
 8000efc:	71bb      	strb	r3, [r7, #6]
	//1.generate the start condition
	I2C_GenerateStartCondition(pI2Cx);
 8000efe:	68f8      	ldr	r0, [r7, #12]
 8000f00:	f7ff fea5 	bl	8000c4e <I2C_GenerateStartCondition>
	//2.confirm the start condition was completed by SB flag
	while(!I2C_GetFlagStatus(pI2Cx,I2C_FLAG_SB ));
 8000f04:	bf00      	nop
 8000f06:	2101      	movs	r1, #1
 8000f08:	68f8      	ldr	r0, [r7, #12]
 8000f0a:	f7ff fe63 	bl	8000bd4 <I2C_GetFlagStatus>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d0f8      	beq.n	8000f06 <I2C_MasterReceiveData+0x1e>
	//3.send the address of slave + R/nW
	I2C_ExecuteAddressPhaseRead(pI2Cx,SlaveAddr);
 8000f14:	79bb      	ldrb	r3, [r7, #6]
 8000f16:	4619      	mov	r1, r3
 8000f18:	68f8      	ldr	r0, [r7, #12]
 8000f1a:	f7ff fe6e 	bl	8000bfa <I2C_ExecuteAddressPhaseRead>
	//4.confirm address phase was completed by ADDR flag
	while(!I2C_GetFlagStatus(pI2Cx,I2C_FLAG_ADDR ));
 8000f1e:	bf00      	nop
 8000f20:	2102      	movs	r1, #2
 8000f22:	68f8      	ldr	r0, [r7, #12]
 8000f24:	f7ff fe56 	bl	8000bd4 <I2C_GetFlagStatus>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d0f8      	beq.n	8000f20 <I2C_MasterReceiveData+0x38>
	//procedure to read only 1 byte from slave
	if(len==1){
 8000f2e:	79fb      	ldrb	r3, [r7, #7]
 8000f30:	2b01      	cmp	r3, #1
 8000f32:	d116      	bne.n	8000f62 <I2C_MasterReceiveData+0x7a>
		//clear the ADDR fag
		I2C_ClearADDRFlag(pI2Cx);
 8000f34:	68f8      	ldr	r0, [r7, #12]
 8000f36:	f7ff fe3e 	bl	8000bb6 <I2C_ClearADDRFlag>
		//disable ack
		I2C_ManageAcking(pI2Cx,DISABLE);
 8000f3a:	2100      	movs	r1, #0
 8000f3c:	68f8      	ldr	r0, [r7, #12]
 8000f3e:	f7ff fea4 	bl	8000c8a <I2C_ManageAcking>
		// wait until RxNE=1
		while(!I2C_GetFlagStatus(pI2Cx,I2C_FLAG_RXNE ));
 8000f42:	bf00      	nop
 8000f44:	2140      	movs	r1, #64	@ 0x40
 8000f46:	68f8      	ldr	r0, [r7, #12]
 8000f48:	f7ff fe44 	bl	8000bd4 <I2C_GetFlagStatus>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d0f8      	beq.n	8000f44 <I2C_MasterReceiveData+0x5c>
		//generate the stop condition
		I2C_GenerateStoptCondition(pI2Cx);
 8000f52:	68f8      	ldr	r0, [r7, #12]
 8000f54:	f7ff fe8a 	bl	8000c6c <I2C_GenerateStoptCondition>
		//read data from data resgister into buffer
		*pRxBuffer=pI2Cx->DR;
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	691b      	ldr	r3, [r3, #16]
 8000f5c:	b2da      	uxtb	r2, r3
 8000f5e:	68bb      	ldr	r3, [r7, #8]
 8000f60:	701a      	strb	r2, [r3, #0]
	}
	if(len>1){
 8000f62:	79fb      	ldrb	r3, [r7, #7]
 8000f64:	2b01      	cmp	r3, #1
 8000f66:	d92b      	bls.n	8000fc0 <I2C_MasterReceiveData+0xd8>
		//clear the ADDR flag
		I2C_ClearADDRFlag(pI2Cx);
 8000f68:	68f8      	ldr	r0, [r7, #12]
 8000f6a:	f7ff fe24 	bl	8000bb6 <I2C_ClearADDRFlag>
		//read the data until len become zezo
		for(uint8_t i=len;i>0;i--){
 8000f6e:	79fb      	ldrb	r3, [r7, #7]
 8000f70:	75fb      	strb	r3, [r7, #23]
 8000f72:	e022      	b.n	8000fba <I2C_MasterReceiveData+0xd2>
			// wait until RxNE=1
		    while(!I2C_GetFlagStatus(pI2Cx,I2C_FLAG_RXNE ));
 8000f74:	bf00      	nop
 8000f76:	2140      	movs	r1, #64	@ 0x40
 8000f78:	68f8      	ldr	r0, [r7, #12]
 8000f7a:	f7ff fe2b 	bl	8000bd4 <I2C_GetFlagStatus>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d0f8      	beq.n	8000f76 <I2C_MasterReceiveData+0x8e>
		    //if last 2 byte are remaining
		    if(i==2){
 8000f84:	7dfb      	ldrb	r3, [r7, #23]
 8000f86:	2b02      	cmp	r3, #2
 8000f88:	d106      	bne.n	8000f98 <I2C_MasterReceiveData+0xb0>
		    	//disable ack
		    	I2C_ManageAcking(pI2Cx,DISABLE);
 8000f8a:	2100      	movs	r1, #0
 8000f8c:	68f8      	ldr	r0, [r7, #12]
 8000f8e:	f7ff fe7c 	bl	8000c8a <I2C_ManageAcking>
		    	//generate the stop condition
		    	I2C_GenerateStoptCondition(pI2Cx);
 8000f92:	68f8      	ldr	r0, [r7, #12]
 8000f94:	f7ff fe6a 	bl	8000c6c <I2C_GenerateStoptCondition>
		    }
		    //read data from data resgister into buffer
		    		*pRxBuffer=pI2Cx->DR;
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	691b      	ldr	r3, [r3, #16]
 8000f9c:	b2da      	uxtb	r2, r3
 8000f9e:	68bb      	ldr	r3, [r7, #8]
 8000fa0:	701a      	strb	r2, [r3, #0]
		    // increase the buffer's adddress
		    	     pRxBuffer++;
 8000fa2:	68bb      	ldr	r3, [r7, #8]
 8000fa4:	3301      	adds	r3, #1
 8000fa6:	60bb      	str	r3, [r7, #8]
		    	     (*count)++;
 8000fa8:	6a3b      	ldr	r3, [r7, #32]
 8000faa:	781b      	ldrb	r3, [r3, #0]
 8000fac:	3301      	adds	r3, #1
 8000fae:	b2da      	uxtb	r2, r3
 8000fb0:	6a3b      	ldr	r3, [r7, #32]
 8000fb2:	701a      	strb	r2, [r3, #0]
		for(uint8_t i=len;i>0;i--){
 8000fb4:	7dfb      	ldrb	r3, [r7, #23]
 8000fb6:	3b01      	subs	r3, #1
 8000fb8:	75fb      	strb	r3, [r7, #23]
 8000fba:	7dfb      	ldrb	r3, [r7, #23]
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d1d9      	bne.n	8000f74 <I2C_MasterReceiveData+0x8c>
		}
	}
	//re-enable ACKing
	I2C_ManageAcking(pI2Cx,ENABLE);
 8000fc0:	2101      	movs	r1, #1
 8000fc2:	68f8      	ldr	r0, [r7, #12]
 8000fc4:	f7ff fe61 	bl	8000c8a <I2C_ManageAcking>
}
 8000fc8:	bf00      	nop
 8000fca:	3718      	adds	r7, #24
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}

08000fd0 <main>:

int main(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b088      	sub	sp, #32
 8000fd4:	af02      	add	r7, sp, #8
  //init
	Init();
 8000fd6:	f7ff fe73 	bl	8000cc0 <Init>
  //enable the I2C peripheral
  I2C_PeripheralControl(pI2C1,ENABLE);
 8000fda:	4b4f      	ldr	r3, [pc, #316]	@ (8001118 <main+0x148>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	2101      	movs	r1, #1
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f7ff fdcd 	bl	8000b80 <I2C_PeripheralControl>

  // ACK on
  I2C_ManageAcking(pI2C1,ENABLE);
 8000fe6:	4b4c      	ldr	r3, [pc, #304]	@ (8001118 <main+0x148>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	2101      	movs	r1, #1
 8000fec:	4618      	mov	r0, r3
 8000fee:	f7ff fe4c 	bl	8000c8a <I2C_ManageAcking>

  //Create an array containing data
  uint8_t AHT10_data[6]={0,0,0,0,0,0};
 8000ff2:	4a4a      	ldr	r2, [pc, #296]	@ (800111c <main+0x14c>)
 8000ff4:	1d3b      	adds	r3, r7, #4
 8000ff6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000ffa:	6018      	str	r0, [r3, #0]
 8000ffc:	3304      	adds	r3, #4
 8000ffe:	8019      	strh	r1, [r3, #0]

  uint8_t CheckBuffer;
  uint32_t AHT10_ADC_Raw;
  float AHT10_Temperature;
  while(1){
	  uint8_t count=0;
 8001000:	2300      	movs	r3, #0
 8001002:	74fb      	strb	r3, [r7, #19]
	 // Measure and save 10 values from AHT10
	  for(uint8_t i=0;i<10;i++){
 8001004:	2300      	movs	r3, #0
 8001006:	74bb      	strb	r3, [r7, #18]
 8001008:	e052      	b.n	80010b0 <main+0xe0>
		      CheckBuffer=0;
 800100a:	2300      	movs	r3, #0
 800100c:	70fb      	strb	r3, [r7, #3]
		 	  AHT10_ADC_Raw&=(~(0xffff));
 800100e:	697b      	ldr	r3, [r7, #20]
 8001010:	0c1b      	lsrs	r3, r3, #16
 8001012:	041b      	lsls	r3, r3, #16
 8001014:	617b      	str	r3, [r7, #20]
		 	  AHT10_Temperature=0;
 8001016:	f04f 0300 	mov.w	r3, #0
 800101a:	60fb      	str	r3, [r7, #12]
		 	  I2C_MasterSendData(pI2C1,AHT10_command,3,0x38);
 800101c:	4b3e      	ldr	r3, [pc, #248]	@ (8001118 <main+0x148>)
 800101e:	6818      	ldr	r0, [r3, #0]
 8001020:	2338      	movs	r3, #56	@ 0x38
 8001022:	2203      	movs	r2, #3
 8001024:	493e      	ldr	r1, [pc, #248]	@ (8001120 <main+0x150>)
 8001026:	f7ff ff0b 	bl	8000e40 <I2C_MasterSendData>
		 	  delay();
 800102a:	f7ff fd47 	bl	8000abc <delay>
		 	  I2C_MasterReceiveData(pI2C1,AHT10_data,6,0x38,&CheckBuffer);
 800102e:	4b3a      	ldr	r3, [pc, #232]	@ (8001118 <main+0x148>)
 8001030:	6818      	ldr	r0, [r3, #0]
 8001032:	1d39      	adds	r1, r7, #4
 8001034:	1cfb      	adds	r3, r7, #3
 8001036:	9300      	str	r3, [sp, #0]
 8001038:	2338      	movs	r3, #56	@ 0x38
 800103a:	2206      	movs	r2, #6
 800103c:	f7ff ff54 	bl	8000ee8 <I2C_MasterReceiveData>
		 	  while(!(CheckBuffer == 6));
 8001040:	bf00      	nop
 8001042:	78fb      	ldrb	r3, [r7, #3]
 8001044:	2b06      	cmp	r3, #6
 8001046:	d1fc      	bne.n	8001042 <main+0x72>
		 	  //convert to Temperature C degrees
		 	  AHT10_ADC_Raw=((((uint32_t)AHT10_data[3]&15)<<16) | ((uint32_t)AHT10_data[4]<<8) |((uint32_t)AHT10_data[5]));
 8001048:	79fb      	ldrb	r3, [r7, #7]
 800104a:	041b      	lsls	r3, r3, #16
 800104c:	f403 2270 	and.w	r2, r3, #983040	@ 0xf0000
 8001050:	7a3b      	ldrb	r3, [r7, #8]
 8001052:	021b      	lsls	r3, r3, #8
 8001054:	4313      	orrs	r3, r2
 8001056:	7a7a      	ldrb	r2, [r7, #9]
 8001058:	4313      	orrs	r3, r2
 800105a:	617b      	str	r3, [r7, #20]
		 	  AHT10_Temperature=(float)(AHT10_ADC_Raw*200.00/1048576.00-50.00);
 800105c:	6978      	ldr	r0, [r7, #20]
 800105e:	f7ff f9c9 	bl	80003f4 <__aeabi_ui2d>
 8001062:	f04f 0200 	mov.w	r2, #0
 8001066:	4b2f      	ldr	r3, [pc, #188]	@ (8001124 <main+0x154>)
 8001068:	f7ff fa3e 	bl	80004e8 <__aeabi_dmul>
 800106c:	4602      	mov	r2, r0
 800106e:	460b      	mov	r3, r1
 8001070:	4610      	mov	r0, r2
 8001072:	4619      	mov	r1, r3
 8001074:	f04f 0200 	mov.w	r2, #0
 8001078:	4b2b      	ldr	r3, [pc, #172]	@ (8001128 <main+0x158>)
 800107a:	f7ff fb5f 	bl	800073c <__aeabi_ddiv>
 800107e:	4602      	mov	r2, r0
 8001080:	460b      	mov	r3, r1
 8001082:	4610      	mov	r0, r2
 8001084:	4619      	mov	r1, r3
 8001086:	f04f 0200 	mov.w	r2, #0
 800108a:	4b28      	ldr	r3, [pc, #160]	@ (800112c <main+0x15c>)
 800108c:	f7ff f874 	bl	8000178 <__aeabi_dsub>
 8001090:	4602      	mov	r2, r0
 8001092:	460b      	mov	r3, r1
 8001094:	4610      	mov	r0, r2
 8001096:	4619      	mov	r1, r3
 8001098:	f7ff fcc0 	bl	8000a1c <__aeabi_d2f>
 800109c:	4603      	mov	r3, r0
 800109e:	60fb      	str	r3, [r7, #12]
		 	  array[i]=AHT10_Temperature;
 80010a0:	7cbb      	ldrb	r3, [r7, #18]
 80010a2:	4923      	ldr	r1, [pc, #140]	@ (8001130 <main+0x160>)
 80010a4:	68fa      	ldr	r2, [r7, #12]
 80010a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	  for(uint8_t i=0;i<10;i++){
 80010aa:	7cbb      	ldrb	r3, [r7, #18]
 80010ac:	3301      	adds	r3, #1
 80010ae:	74bb      	strb	r3, [r7, #18]
 80010b0:	7cbb      	ldrb	r3, [r7, #18]
 80010b2:	2b09      	cmp	r3, #9
 80010b4:	d9a9      	bls.n	800100a <main+0x3a>
	 }
	 //Compare with the temperature mark 10 times
	 for(uint8_t i=0;i<10;i++){
 80010b6:	2300      	movs	r3, #0
 80010b8:	747b      	strb	r3, [r7, #17]
 80010ba:	e014      	b.n	80010e6 <main+0x116>
		 if(array[i]>25.3){
 80010bc:	7c7b      	ldrb	r3, [r7, #17]
 80010be:	4a1c      	ldr	r2, [pc, #112]	@ (8001130 <main+0x160>)
 80010c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010c4:	4618      	mov	r0, r3
 80010c6:	f7ff f9b7 	bl	8000438 <__aeabi_f2d>
 80010ca:	a311      	add	r3, pc, #68	@ (adr r3, 8001110 <main+0x140>)
 80010cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010d0:	f7ff fc9a 	bl	8000a08 <__aeabi_dcmpgt>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d002      	beq.n	80010e0 <main+0x110>
			 count++;
 80010da:	7cfb      	ldrb	r3, [r7, #19]
 80010dc:	3301      	adds	r3, #1
 80010de:	74fb      	strb	r3, [r7, #19]
	 for(uint8_t i=0;i<10;i++){
 80010e0:	7c7b      	ldrb	r3, [r7, #17]
 80010e2:	3301      	adds	r3, #1
 80010e4:	747b      	strb	r3, [r7, #17]
 80010e6:	7c7b      	ldrb	r3, [r7, #17]
 80010e8:	2b09      	cmp	r3, #9
 80010ea:	d9e7      	bls.n	80010bc <main+0xec>
		 }
	 }
	 //logic
	 if(count>=8){
 80010ec:	7cfb      	ldrb	r3, [r7, #19]
 80010ee:	2b07      	cmp	r3, #7
 80010f0:	d905      	bls.n	80010fe <main+0x12e>
		 GPIO_FanOn(pGPIOB);
 80010f2:	4b10      	ldr	r3, [pc, #64]	@ (8001134 <main+0x164>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	4618      	mov	r0, r3
 80010f8:	f7ff fe84 	bl	8000e04 <GPIO_FanOn>
 80010fc:	e780      	b.n	8001000 <main+0x30>
	 }
	 else{
		 GPIO_FanOff(pGPIOB);
 80010fe:	4b0d      	ldr	r3, [pc, #52]	@ (8001134 <main+0x164>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	4618      	mov	r0, r3
 8001104:	f7ff fe8d 	bl	8000e22 <GPIO_FanOff>
  while(1){
 8001108:	e77a      	b.n	8001000 <main+0x30>
 800110a:	bf00      	nop
 800110c:	f3af 8000 	nop.w
 8001110:	cccccccd 	.word	0xcccccccd
 8001114:	40394ccc 	.word	0x40394ccc
 8001118:	20000020 	.word	0x20000020
 800111c:	080011ec 	.word	0x080011ec
 8001120:	20000000 	.word	0x20000000
 8001124:	40690000 	.word	0x40690000
 8001128:	41300000 	.word	0x41300000
 800112c:	40490000 	.word	0x40490000
 8001130:	20000044 	.word	0x20000044
 8001134:	2000001c 	.word	0x2000001c

08001138 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001138:	480d      	ldr	r0, [pc, #52]	@ (8001170 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800113a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800113c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001140:	480c      	ldr	r0, [pc, #48]	@ (8001174 <LoopForever+0x6>)
  ldr r1, =_edata
 8001142:	490d      	ldr	r1, [pc, #52]	@ (8001178 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001144:	4a0d      	ldr	r2, [pc, #52]	@ (800117c <LoopForever+0xe>)
  movs r3, #0
 8001146:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001148:	e002      	b.n	8001150 <LoopCopyDataInit>

0800114a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800114a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800114c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800114e:	3304      	adds	r3, #4

08001150 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001150:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001152:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001154:	d3f9      	bcc.n	800114a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001156:	4a0a      	ldr	r2, [pc, #40]	@ (8001180 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001158:	4c0a      	ldr	r4, [pc, #40]	@ (8001184 <LoopForever+0x16>)
  movs r3, #0
 800115a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800115c:	e001      	b.n	8001162 <LoopFillZerobss>

0800115e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800115e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001160:	3204      	adds	r2, #4

08001162 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001162:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001164:	d3fb      	bcc.n	800115e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001166:	f000 f811 	bl	800118c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800116a:	f7ff ff31 	bl	8000fd0 <main>

0800116e <LoopForever>:

LoopForever:
  b LoopForever
 800116e:	e7fe      	b.n	800116e <LoopForever>
  ldr   r0, =_estack
 8001170:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8001174:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001178:	20000028 	.word	0x20000028
  ldr r2, =_sidata
 800117c:	080011fc 	.word	0x080011fc
  ldr r2, =_sbss
 8001180:	20000028 	.word	0x20000028
  ldr r4, =_ebss
 8001184:	2000006c 	.word	0x2000006c

08001188 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001188:	e7fe      	b.n	8001188 <ADC1_2_IRQHandler>
	...

0800118c <__libc_init_array>:
 800118c:	b570      	push	{r4, r5, r6, lr}
 800118e:	2600      	movs	r6, #0
 8001190:	4d0c      	ldr	r5, [pc, #48]	@ (80011c4 <__libc_init_array+0x38>)
 8001192:	4c0d      	ldr	r4, [pc, #52]	@ (80011c8 <__libc_init_array+0x3c>)
 8001194:	1b64      	subs	r4, r4, r5
 8001196:	10a4      	asrs	r4, r4, #2
 8001198:	42a6      	cmp	r6, r4
 800119a:	d109      	bne.n	80011b0 <__libc_init_array+0x24>
 800119c:	f000 f81a 	bl	80011d4 <_init>
 80011a0:	2600      	movs	r6, #0
 80011a2:	4d0a      	ldr	r5, [pc, #40]	@ (80011cc <__libc_init_array+0x40>)
 80011a4:	4c0a      	ldr	r4, [pc, #40]	@ (80011d0 <__libc_init_array+0x44>)
 80011a6:	1b64      	subs	r4, r4, r5
 80011a8:	10a4      	asrs	r4, r4, #2
 80011aa:	42a6      	cmp	r6, r4
 80011ac:	d105      	bne.n	80011ba <__libc_init_array+0x2e>
 80011ae:	bd70      	pop	{r4, r5, r6, pc}
 80011b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80011b4:	4798      	blx	r3
 80011b6:	3601      	adds	r6, #1
 80011b8:	e7ee      	b.n	8001198 <__libc_init_array+0xc>
 80011ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80011be:	4798      	blx	r3
 80011c0:	3601      	adds	r6, #1
 80011c2:	e7f2      	b.n	80011aa <__libc_init_array+0x1e>
 80011c4:	080011f4 	.word	0x080011f4
 80011c8:	080011f4 	.word	0x080011f4
 80011cc:	080011f4 	.word	0x080011f4
 80011d0:	080011f8 	.word	0x080011f8

080011d4 <_init>:
 80011d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80011d6:	bf00      	nop
 80011d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80011da:	bc08      	pop	{r3}
 80011dc:	469e      	mov	lr, r3
 80011de:	4770      	bx	lr

080011e0 <_fini>:
 80011e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80011e2:	bf00      	nop
 80011e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80011e6:	bc08      	pop	{r3}
 80011e8:	469e      	mov	lr, r3
 80011ea:	4770      	bx	lr
